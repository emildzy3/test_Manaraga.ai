"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM (OpenAI GPT)
–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Å–∞—Ö –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import json

from openai import AsyncOpenAI

from .flight_api import FlightData


class LLMService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Å–∞—Ö —Å –ø–æ–º–æ—â—å—é LLM"""

    def __init__(self, api_key: str):
        self.client = AsyncOpenAI(api_key=api_key)

    async def analyze_flight_data(
        self, question: str, flight_data: list[FlightData], airport_code: str
    ) -> str:
        """
        –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Å–∞—Ö –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            flight_data: –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Å–∞—Ö
            airport_code: –ö–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞

        Returns:
            –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM
        flights_summary = self._prepare_flight_summary(flight_data, airport_code)

        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        system_message = f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Å–∞—Ö,
–ø—Ä–∏–ª–µ—Ç–∞—é—â–∏—Ö –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç {airport_code}, –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
1. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Å–∞—Ö
2. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
3. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞, —É–∫–∞–∂–∏ —ç—Ç–æ
4. –ü—Ä–∏–≤–æ–¥–∏ —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ
5. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
6. –ï—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤, —Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ {airport_code}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—é—Ç:
- –°—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Å–æ–≤
- –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏
- –ù–æ–º–µ—Ä–∞ —Ä–µ–π—Å–æ–≤
- –í—Ä–µ–º—è –ø—Ä–∏–ª–µ—Ç–∞
- –°—Ç–∞—Ç—É—Å —Ä–µ–π—Å–æ–≤

–î–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Å–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{flights_summary}
"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –º–æ–∫-–∫–ª—é—á
        if self.client.api_key == "mock_openai_key":
            return self._generate_mock_response(question, flight_data, airport_code)

        try:
            response = await self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_message},
                    {"role": "user", "content": question},
                ],
                max_tokens=1000,
                temperature=0.1,
            )

            return response.choices[0].message.content or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"

        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}"

    def _prepare_flight_summary(
        self, flight_data: list[FlightData], airport_code: str
    ) -> str:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Å–∞—Ö –¥–ª—è LLM

        Args:
            flight_data: –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Å–∞—Ö
            airport_code: –ö–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞

        Returns:
            JSON —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–µ–π—Å–∞—Ö
        """
        summary_data = {
            "airport": airport_code,
            "total_flights": len(flight_data),
            "countries": {},
            "cities": {},
            "airlines": {},
            "flights": [],
        }

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç—Ä–∞–Ω–∞–º, –≥–æ—Ä–æ–¥–∞–º –∏ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è–º
        for flight in flight_data:
            # –°—Ç—Ä–∞–Ω—ã
            country = flight.departure_country
            if country in summary_data["countries"]:
                summary_data["countries"][country] += 1
            else:
                summary_data["countries"][country] = 1

            # –ì–æ—Ä–æ–¥–∞
            city = flight.departure_city
            if city in summary_data["cities"]:
                summary_data["cities"][city] += 1
            else:
                summary_data["cities"][city] = 1

            # –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏
            airline = flight.airline
            if airline in summary_data["airlines"]:
                summary_data["airlines"][airline] += 1
            else:
                summary_data["airlines"][airline] = 1

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Å–µ
            flight_info = {
                "flight_number": flight.flight_number,
                "airline": flight.airline,
                "from_country": flight.departure_country,
                "from_city": flight.departure_city,
                "from_airport": flight.departure_airport,
                "scheduled_time": flight.scheduled_time.isoformat(),
                "status": flight.status,
            }
            summary_data["flights"].append(flight_info)

        return json.dumps(summary_data, ensure_ascii=False, indent=2)

    def _generate_mock_response(
        self, question: str, flight_data: list[FlightData], airport_code: str
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫-–æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ OpenAI API

        Args:
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            flight_data: –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Å–∞—Ö
            airport_code: –ö–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞

        Returns:
            –ú–æ–∫-–æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        """
        total_flights = len(flight_data)
        countries = {flight.departure_country for flight in flight_data}
        airlines = {flight.airline for flight in flight_data}

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if "—Å–∫–æ–ª—å–∫–æ" in question.lower() or "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ" in question.lower():
            if "—Å—Ç—Ä–∞–Ω" in question.lower():
                return f"–í –∞—ç—Ä–æ–ø–æ—Ä—Ç {airport_code} –ø—Ä–∏–ª–µ—Ç–∞—é—Ç —Ä–µ–π—Å—ã –∏–∑ {len(countries)} —Å—Ç—Ä–∞–Ω: {', '.join(sorted(countries)[:5])}{'...' if len(countries) > 5 else ''}."
            elif "—Ä–µ–π—Å" in question.lower():
                return f"–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {total_flights} —Ä–µ–π—Å–æ–≤ –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç {airport_code}."
        elif "–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏" in question.lower():
            top_airlines = list(airlines)[:3]
            return f"–û—Å–Ω–æ–≤–Ω—ã–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–µ —Ä–µ–π—Å—ã –≤ {airport_code}: {', '.join(top_airlines)}."
        elif "—Å—Ç—Ä–∞–Ω" in question.lower():
            top_countries = list(countries)[:5]
            return f"–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Å–æ–≤ –≤ {airport_code}: {', '.join(top_countries)}."
        else:
            return f"""
üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ {airport_code}:

‚Ä¢ –í—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤: {total_flights}
‚Ä¢ –°—Ç—Ä–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {len(countries)}
‚Ä¢ –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π: {len(airlines)}
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã: {", ".join(list(countries)[:3])}

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ OpenAI API –∫–ª—é—á.*
"""

    async def get_sample_questions(self, airport_code: str) -> list[str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞

        Args:
            airport_code: –ö–æ–¥ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞

        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
        """
        airport_names = {
            "DXB": "Dubai International",
            "LHR": "London Heathrow",
            "CDG": "Charles de Gaulle (Paris)",
            "SIN": "Singapore Changi",
            "HKG": "Hong Kong International",
            "AMS": "Amsterdam Schiphol",
        }

        airport_name = airport_names.get(airport_code, airport_code)

        return [
            f"–°–∫–æ–ª—å–∫–æ —Ä–µ–π—Å–æ–≤ –ø—Ä–∏–ª–µ—Ç–µ–ª–æ –≤ {airport_name} –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏?",
            f"–ö–∞–∫–∏–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ —á–∞—â–µ –≤—Å–µ–≥–æ –ª–µ—Ç–∞—é—Ç –≤ {airport_name}?",
            f"–ò–∑ –∫–∞–∫–∏—Ö —Å—Ç—Ä–∞–Ω –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–µ–π—Å–æ–≤ –≤ {airport_name}?",
            f"–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ä–µ–π—Å–∞—Ö –≤ {airport_name}?",
            f"–ö–∞–∫–∏–µ –≥–æ—Ä–æ–¥–∞ —á–∞—â–µ –≤—Å–µ–≥–æ —Å–≤—è–∑–∞–Ω—ã —Å {airport_name}?",
        ]
